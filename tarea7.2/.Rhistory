install.packages("ape")
library(ape)
library(ape)
install.packages("adegenet")
library(adegenet)
install.packages("adegenet")
config.log()
config.log
install.packages(c("units", "sf", "spdep", "adegenet"))
install.packages("units")
install.packages(c("units", "sf", "spdep", "adegenet"))
install.packages("sf")
install.packages("spdep")
install.packages("adegenet")
install.packages("adegenet", dependencies = FALSE)
library(adegenet)
install.packages("adegenet")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
library(ggtree)
1+1
# Crear un objeto con el resultado de una suma
x <- 1+1
# Crear un objeto con el resultado de una suma
x<-1+1
# expresiones matemáticas
(3434+321)*2
# Cadenas de texto
"Hola mundo"
# Valores lógicos
1 < 5
2+2 == 5
# Funciones
getwd()
sum(2,6,7,10)
x<-5
y<-4
help("sum")
?mean
### Ejercicio: crea una variable con el logaritmo base 10 de 50 y súmalo a otra variable cuyo valor sea igual a 5.
# Crear variable con valor log base 10 de 50
?log
z<-log10(50)
# Crear variable con valor de 5
x<-5
# Sumar las dos variables
z+x
z<-log(50, base = exp(10))
# Crear variable con valor de 5
x<-5
# Sumar las dos variables
z+x
z<-log(50, 10)
# Crear variable con valor de 5
x<-5
# Sumar las dos variables
z+x
### Notas de tipos de objetos
## Vectores
mi_vector<-c(1,2,3,4)
length(mi_vector)
mi_vector2 <- c(mi_vector, 80:85)
mi_vector2 <- c(mi_vector, 20, 23, 80:85)
mi_vector2
# Crear vector con numeros del 1 al 15
mi_vector3 <- c(1:15)
# Acceder a elementos dentro de un vector
mi_vector3[3]
mi_vector2[3:7]
# Ejercicio: Crear un vector con los números del 1 al 200 y del 300 al 450
mi_vector4 <- c(1:200, 300:450)
mi_vector4
### Lógicos
10!=0
# Lógicos en vectores
x <- c(1:20)
x>15
# Que me de los elementos que cumplan con una condición lógica
x[x>15]
### Ejercicio: El logaritmo base 10 de 20 es menor que la raiz cuadrada de 4
log(20, 10) < sqrt(4)
### Ejercicio: El logaritmo base 10 de 20 es menor que la raiz cuadrada de 4
?log
?sqrt
### Characters
caracteres<- c("tangana nica", "tangana na")
caracteres
caracteres[2]
x=="tangana nica"
caracteres=="tangana nica"
# grep al rescate....YEAH!!!
grep("tangana", caracteres)
especies <- c("Abies religiosa", "Abies flinckii", "Pinus pseudostrobus")
grep("Abies", especies)
especies <- c("Abies religiosa", "Pinus pseudostrobus", "Abies flinckii")
grep("Abies", especies)
coniferas <- c("Abies religiosa", "Pinus pseudostrobus", "Abies flinckii")
grep("Abies", coniferas)
x[grep("Abies", coniferas)]
x[grep("Abies", coniferas)]
grep("Abies", coniferas)
especies[grep("Abies", coniferas)]
### Factores
a <- d(1,2,1,3,2,3,1,1,2)
### Factores
a <- c(1,2,1,3,2,3,1,1,2)
# Ver a como un factor
as.factor(a)
b<-as.factor(a)
meses <-c("march", "april", "january", "march")
meses <- as.factor(meses)
meses
table(meses)
# Revisar los levels de un factor
levels(meses)
# Cambiar los valores de un factor cambiando su level
levels(x)[1]<-"uno"
# Cambiar los valores de un factor cambiando su level
levels(b)[1]<-"uno"
b
q()
?read.delim
x <- data.frame(sp=c("Homo sapiens", "Homo sapiens", "Homo neanderthalensis", "Homo neandearthalensis"),)
x <- data.frame(sp=c("Homo sapiens", "Homo sapiens", "Homo neanderthalensis", "Homo neandearthalensis"), sexo=c(Male, Female, Male, Female), edad=c(60,30,10,50)
)
x <- data.frame(sp=c("Homo sapiens", "Homo sapiens", "Homo neanderthalensis", "Homo neandearthalensis"), sexo=as.factor(c(Male, Female, Male, Female), edad=c(60,30,10,50)
)
)
x <- data.frame(sp=c("Homo sapiens", "Homo sapiens", "Homo neanderthalensis", "Homo neandearthalensis"),(c("Male", "Female", "Male", "Female"), edad=c(60,30,10,50)
x <- data.frame(sp=c("Homo sapiens", "Homo sapiens", "Homo neanderthalensis", "Homo neandearthalensis"),c("Male", "Female", "Male", "Female"), edad=c(60,30,10,50))
View(x)
x <- data.frame(sp=c("Homo sapiens", "Homo sapiens", "Homo neanderthalensis", "Homo neandearthalensis"),sexo=c("Male", "Female", "Male", "Female"), edad=c(60,30,10,50))
install.packages("rmarkdown")
library(rmarkdown)
rm(list= ls)
rm(list= ls))
rm(list = ls())
install.packages("tidyr")
install.packages("readr")
q()
20 < c(13432:234)
?matrix
# crear matriz con números en tres filas y dos columnas
A <- matrix(1:6, nrow = 3, ncol = 2)
View(A)
?t
# Transponer la matriz A y guardarla en B
B <- t(A)
View(B)
# Combinar las matrices A y B en C
C <- merge(A, B)
as.matrix(C)
# Combinar las matrices A y B en C
C <- merge(A, B)
C<- as.matrix(C)
View(C)
?merge
# Combinar las matrices A y B en C
C <- merge(A, B. all(TRUE))
# Combinar las matrices A y B en C
C <- merge(A, B, all(TRUE)
View(C)
View(C)
# Combinar las matrices A y B en C
C <- merge(A, B, all(TRUE))
View(A)
View(B)
# Combinar las matrices A y B en C
C <- merge(A, B)
C<- as.matrix(C)
View(C)
# crear matriz con números en tres filas y dos columnas
A <- matrix(1:6, nrow = 3, ncol = 2)
# Transponer la matriz A y guardarla en B
B <- t(A)
# Combinar las matrices A y B en C
C <- merge(A, B)
View(C)
?rbind
# Combinar las matrices A y B en C
C <- rbind(A, B)
# Combinar las matrices A y B en C
C <- dim(rbind(A, B))
# Combinar las matrices A y B en C
C <- dim(rbind(A, B))
# Combinar las matrices A y B en C
C <- dim(rbind(A, B))
?merge
C <- merge(A, B, all.x=TRUE, all.y= TRUE)
View(C)
# crear matriz con números en tres filas y dos columnas
A <- matrix(1:6, nrow = 3, ncol = 2)
# Transponer la matriz A y guardarla en B
B <- t(A)
# Combinar las matrices A y B en C
C <- merge(A, B, all.x=TRUE, all.y= TRUE)
View(C)
?colnames
colnames(A)<- c(col1, col2)
colnames(A)<- c("col1", "col2")
colnames(B) <- c("col1", "col2", "col3")
View(A)
?merge
# Juntar las matrices
merge(A,B)
View(C)
?merge
# Juntar las matrices
merge(A,B, by.y=TRUE)
# Juntar las matrices
merge(A,B, by=row.names(col1, col2, col3))
# Juntar las matrices
merge(A,B, by=row.names("col1", "col2", "col3"))
# Juntar las matrices
C <- rbind(A,B, [colnames(B)])
# Juntar las matrices
C <- rbind(A,B[colnames(B)])
View(C)
# Juntar las matrices
C <- rbind(A[rownames(A)],B[colnames(B)])
View(C)
# Juntar las matrices
C <- rbind(A[rownames(B)],B[colnames(A)])
View(C)
?rbind
## Combinar las matrices A y B en C
C <- merge(A, B, all.x=TRUE, all.y= TRUE)
View(C)
## Construir un dataframe con dos vectores de texto y uno numérico
df<- data.frame(a=c("oyamel", "pino", "pino"), b=c("juvenil", "juvenil", "adulto"),
m=c(10,12,35))
View(df)
?data.frame
class(df$a)
q()
help(ggtree)
??ggtree
library(ggplot2)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width))  + geom_point(col(Species))
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width))  + geom_point(col("Species"))
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width))  + geom_point(color=Species)
iris
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width))  + geom_point(color="Species")
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width))  + geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width))  + geom_point(), color = "Species"
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width))  + geom_point(color="Species")
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width,
color="Species")) + geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width,
color=Species)) + geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point(color=Species)
?geom_point
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point(colour=Species)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point()
# 2. Generar datos dat y generar un barplot, coloreado por especie
set.seed(10)
dat <- data.frame(species=factor(rep(c("invetus", "otrus"), each=300)),
size=c(rnorm(300, mean = 162), rnorm(300, mean=165)))
View(dat)
dat <- data.frame(species=factor(rep(c("inventus", "otrus"), each=300)),
size=c(rnorm(300, mean = 162), rnorm(300, mean=165)))
View(dat)
?histogram
?ggplot
View(dat)
# Generar histograma
ggplot(data=dat, aes(x=species, color=c("green3", "darkblue"))) + geom_histogram()
# Generar histograma
ggplot(data=dat, aes(x=size, color=c("green3", "darkblue"))) + geom_histogram()
# Generar histograma
ggplot(data=dat, aes(x=size, fill= cond, color=c("green3", "darkblue"))) +
geom_histogram()
# Generar histograma
ggplot(data=dat, aes(x=size, fill= species, color=c("green3", "darkblue"))) +
geom_histogram()
dat <- data.frame(species=factor(rep(c("inventus", "otrus"), each=300)),
size=c(rnorm(300, mean = 162), rnorm(300, mean=165)))
# Generar histograma
ggplot(data=dat, aes(x=size, fill= species, color=c("green3", "darkblue"))) +
geom_histogram()
# Generar histograma
ggplot(data=dat, aes(x=size, fill= species, color=Species)) +
geom_histogram()
# Generar histograma
ggplot(data=dat, aes(x=size, fill= species, color=species)) +
geom_histogram()
# Generar histograma
palette(c("green3", "darkblue"))
ggplot(data=dat, aes(x=size, fill= species, color=species)) +
geom_histogram()
# Generar datos
set.seed(10)
dat <- data.frame(species=factor(rep(c("inventus", "otrus"), each=300)),
size=c(rnorm(300, mean = 162), rnorm(300, mean=165)))
# Generar histograma
palette(c("green3", "darkblue"))
ggplot(data=dat, aes(x=size, fill= species, color=species)) +
geom_histogram()
# Generar histograma
ggplot(data=dat, aes(x=size, fill= species, color=species,
col(c("green3", "darkblue")))) +
geom_histogram()
# Generar histograma
ggplot(data=dat, aes(x=size, fill= species, color=species)))) +
geom_histogram()
# Generar histograma
ggplot(data=dat, aes(x=size, fill= species, color=species)))) + geom_histogram()
# Generar histograma
ggplot(data=dat, aes(x=size, fill= species, color=species)) + geom_histogram()
?geom_histogram
# Generar histograma
ggplot(data=dat, aes(x=size, fill= species, color=species)) +
geom_histogram(scale_fill_manual(inventus="green3", otrus="darkblue"))
# Generar histograma
ggplot(data=dat, aes(x=size, fill= species, color=species)) +
geom_histogram(scale_fill_manual("inventus"="green3", "otrus"="darkblue"))
"otrus"="darkblue"))
"otrus"="darkblue")
# Generar histograma
ggplot(data=dat, aes(x=size, fill= species, color=species)) +
geom_histogram(scale_fill_manual(species,
values = c("inventus"="green3",
"otrus"="darkblue")))
# Generar histograma
ggplot(data=dat, aes(x=size, fill= species, color=species)) +
geom_histogram(scale_fill_manual("species",
values = c("inventus"="green3",
"otrus"="darkblue")))
# Generar histograma
colors_g=c("green3", "darkblue")
ggplot(data=dat, aes(x=size, fill= species, color=species)) +
geom_histogram(fill=colors_g)
ggplot(data=dat, aes(x=size, fill= species, color=species)) +
geom_histogram()
ggplot(data=dat, aes(x=size, fill= species, color=species)) +
geom_histogram(fill=colores_g)
ggplot(data=dat, aes(x=size, fill= species, color=species)) +
geom_histogram(fill=colors_g)
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram(fill=colors_g)
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram()
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram() + scale_fill_manual(values = c("green3", "darkblue"))
?ggplot
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram() + scale_fill_manual(values = c("green3", "darkblue")) +
labs(x="Tamaño", y="Individuos")
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram() + scale_fill_manual(values = c("green3", "darkblue")) +
labs(fill= "Especie", x="Tamaño", y="Individuos")
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram() + scale_fill_manual(values = alpha(c("green3", "darkblue"))) +
labs(fill= "Especie", x="Tamaño", y="Individuos")
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram() + scale_fill_manual(values = alpha(c("green3", "darkblue"))) +
labs(fill= "Especie", x="Tamaño", y="Individuos")
labs(fill= "Especie", x="Tamaño", y="Individuos")
labs(fill= "Especie", x="Tamaño", y="Individuos")
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram() + scale_fill_manual(values = (c("green3", "darkblue"))) +
labs(fill= "Especie", x="Tamaño", y="Individuos")
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram(alpha=0.8) + scale_fill_manual(values = (c("green3", "darkblue"))) +
labs(fill= "Especie", x="Tamaño", y="Individuos")
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram(alpha=0.2) + scale_fill_manual(values = (c("green3", "darkblue"))) +
labs(fill= "Especie", x="Tamaño", y="Individuos")
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram(alpha=0.4) + scale_fill_manual(values = (c("green3", "darkblue"))) +
labs(fill= "Especie", x="Tamaño", y="Individuos")
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram(alpha=0.5) + scale_fill_manual(values = (c("green3", "darkblue"))) +
labs(fill= "Especie", x="Tamaño", y="Individuos")
ggplot(data=dat, aes(x=size, fill= species)) +
geom_histogram(binwidth=0.5, alpha=0.5,
position = "identity") + scale_fill_manual(values = (c("green3", "darkblue"))) +
labs(fill= "Especie", x="Tamaño", y="Individuos")
q()
library(ggplot2)
ggplot(data=iris, aes(x=Sepal.Length, y= Sepal.Width, color=Species)) + geom_point()
+ geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y= Sepal.Width, color=Species)) +
geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y= Sepal.Width, color=Species)) + geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y= Sepal.Width)) + geom_point()
read.delim?
library(ggplot2)
read.delim?
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color= Species)) +
geom_point()
library(ggplot2)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color= Species)) +
geom_point()
q()
q("no")
library(treeio)
?tapply
setwd("/media/ubuntu/DATA/aejmi/Tareas-BioinfRepro2020_MickAmest/tarea7.2")
data <- read.table("data_sample.txt", header = T)
View(data)
